generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Shop {
  id       String   @id @default(uuid())
  name     String
  users        User[]
  clients      Client[]
  treatments   Treatment[]
  orders       Order[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id       String   @id @default(uuid())
  email    String?   @unique
  password String?
  role     Role
  firstName String
  lastName  String

  stylistOrders Order[] @relation("StylistUser")
  cashierOrders Order[] @relation("CashierUser")
  operatorOrders Order[] @relation("OperatorUser")

  shopId    String
  shop      Shop     @relation(fields: [shopId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id    String  @id @default(uuid())
  dni   String @unique
  name  String
  phone String?
  email String?

  orders Order[]

  shopId    String
  shop      Shop     @relation(fields: [shopId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Treatment {
  id    String @id @default(uuid())
  name  String
  percentage Float

  orderTreatments OrderTreatment[]

  shopId    String
  shop      Shop     @relation(fields: [shopId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderTreatment {
  id           String   @id @default(uuid())
  orderId      String
  treatmentId  String
  price        Float

  order        Order     @relation(fields: [orderId], references: [id])
  treatment    Treatment @relation(fields: [treatmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String   @id @default(uuid())

  stylistId  String
  stylist    User     @relation("StylistUser", fields: [stylistId], references: [id])

  operatorId  String
  operator    User     @relation("OperatorUser", fields: [operatorId], references: [id])

  cashierId  String
  cashier    User     @relation("CashierUser", fields: [cashierId], references: [id])

  shopId    String
  shop      Shop     @relation(fields: [shopId], references: [id])

  clientId   String
  client     Client  @relation(fields: [clientId], references: [id])

  treatments OrderTreatment[]
  totalPrice    Float

  paidAmount    Float?
  paymentMethod PaymentMethod?
  status        OrderStatus @default(Created)
  orderNumber  Int @unique @default(autoincrement())
  ticketNumber String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  Stylist
  Cashier
  Operator
  Manager
}

enum OrderStatus {
  Created
  Claimed
  Completed
  Cancelled
}

enum PaymentMethod {
  Cash
  Yape
  Card
}